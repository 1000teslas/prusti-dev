#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
// compile-flags: -Zprint-desugared-specs
// normalize-stdout-test: "prusti_pre_item_test/d+_[a-z0-9]{32}" -> "prusti_post_item_testNUM_UUID"
// normalize-stdout-test: "prusti_post_item_test/d+_[a-z0-9]{32}" -> "prusti_post_item_testNUM_UUID"

use prusti_contracts::*;

fn prusti_post_item_testNUM_UUID() {
    || -> bool { true };
}
fn test1() { }

fn prusti_post_item_testNUM_UUID() {
    || -> bool { true };
}
fn test2() { }

fn test3() {
    for _ in 0..2 {


        {
            #[allow(dead_code)]
            enum ProcMacroHack { Value = ("true", 0).1, }
            macro_rules! proc_macro_call {
                () =>
                {
                    if false
                    {
                        let _prusti_loop_invariant = { || -> bool { true } ; }
                        ;
                    }
                }
            }
            if false {
                let _prusti_loop_invariant = { || -> bool { true }; };
            }
        }
    }
}
fn prusti_post_item_testNUM_UUID() {
    || -> bool { true };
}
fn prusti_post_item_testNUM_UUID() {
    || -> bool { true };
}
fn test4() {
    for _ in 0..2 {
        {
            #[allow(dead_code)]
            enum ProcMacroHack { Value = ("true", 0).1, }
            macro_rules! proc_macro_call {
                () =>
                {
                    if false
                    {
                        let _prusti_loop_invariant = { || -> bool { true } ; }
                        ;
                    }
                }
            }
            if false {
                let _prusti_loop_invariant = { || -> bool { true }; };
            }
        }
    }
}
fn main() { }
