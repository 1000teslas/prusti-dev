// https://rosettacode.org/wiki/Fibonacci_sequence#Rust

// Iterative

use std::mem;
fn main() {
    let mut prev = 0;
    // Rust needs this type hint for the checked_add method
    let mut curr = 1usize;
 
    while let Some(n) = curr.checked_add(prev) {
        prev = curr;
        curr = n;
        println!("{}", n);
    }
}

// Recursive

use std::mem;
fn main() {
    fibonacci(0,1);
}
 
fn fibonacci(mut prev: usize, mut curr: usize) {
    mem::swap(&mut prev, &mut curr);
    if let Some(n) = curr.checked_add(prev) {
        println!("{}", n);
        fibonacci(prev, n);
    }
}

// Using an Iterator

use std::mem;
 
struct Fib {
    prev: usize,
    curr: usize,
} 
 
impl Fib {
    fn new() -> Self {
        Fib {prev: 0, curr: 1}
    }
}
 
impl Iterator for Fib {
    type Item = usize;
    fn next(&mut self) -> Option<Self::Item>{
        mem::swap(&mut self.curr, &mut self.prev);
        self.curr.checked_add(self.prev).map(|n| { 
            self.curr = n;
            n
        })
    }
}
 
fn main() {
    for num in Fib::new() {
        println!("{}", num);
    }
}
