https://rosettacode.org/wiki/Knapsack_problem/0-1#Rust

use std::cmp;
 
struct Item {
    name: &'static str,
    weight: usize,
    value: usize
}
 
fn knapsack01_dyn(items: &[Item], max_weight: usize) -> Vec<&Item> {
    let mut best_value = vec![vec![0; max_weight + 1]; items.len() + 1];
    for (i, it) in items.iter().enumerate() {
        for w in 1 .. max_weight + 1 {
            best_value[i + 1][w] =
                if it.weight > w {
                    best_value[i][w]
                } else {
                    cmp::max(best_value[i][w], best_value[i][w - it.weight] + it.value)
                }
        }
    }
 
    let mut result = Vec::with_capacity(items.len());
    let mut left_weight = max_weight;
 
    for (i, it) in items.iter().enumerate().rev() {
        if best_value[i + 1][left_weight] != best_value[i][left_weight] {
            result.push(it);
            left_weight -= it.weight;
        }
    }
 
    result
}
