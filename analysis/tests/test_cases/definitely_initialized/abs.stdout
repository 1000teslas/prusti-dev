Analyzing file $DIR/abs.rs using DefinitelyInitializedState...
Result for function abs():
{
  "bb0": [
    [
      [
        "state:",
        [
          "_1"
        ],
        "statement: StorageLive(_3)"
      ],
      [
        "state:",
        [
          "_1"
        ],
        "statement: StorageLive(_4)"
      ],
      [
        "state:",
        [
          "_1"
        ],
        "statement: StorageLive(_5)"
      ],
      [
        "state:",
        [
          "_1"
        ],
        "statement: StorageLive(_6)"
      ],
      [
        "state:",
        [
          "_1"
        ],
        "statement: _6 = _1"
      ],
      [
        "state:",
        [
          "_1",
          "_6"
        ],
        "statement: _5 = Ge(move _6, const 0_i32)"
      ],
      [
        "state:",
        [
          "_1",
          "_5"
        ],
        "statement: StorageDead(_6)"
      ],
      [
        "state:",
        [
          "_1",
          "_5"
        ],
        "statement: FakeRead(ForMatchedPlace, _5)"
      ]
    ],
    "state before terminator:",
    [
      "_1",
      "_5"
    ],
    "terminator: switchInt(_5) -> [false: bb2, otherwise: bb1]",
    {
      "bb1": [
        "state:",
        [
          "_1",
          "_5"
        ]
      ],
      "bb2": [
        "state:",
        [
          "_1",
          "_5"
        ]
      ]
    }
  ],
  "bb1": [
    [],
    "state before terminator:",
    [
      "_1",
      "_5"
    ],
    "terminator: falseEdge -> [real: bb3, imaginary: bb2]",
    {
      "bb2": [
        "state:",
        [
          "_1",
          "_5"
        ]
      ],
      "bb3": [
        "state:",
        [
          "_1",
          "_5"
        ]
      ]
    }
  ],
  "bb2": [
    [
      [
        "state:",
        [
          "_1",
          "_5"
        ],
        "statement: StorageLive(_8)"
      ],
      [
        "state:",
        [
          "_1",
          "_5"
        ],
        "statement: _8 = _1"
      ],
      [
        "state:",
        [
          "_1",
          "_5",
          "_8"
        ],
        "statement: _9 = Eq(_8, const i32::MIN)"
      ]
    ],
    "state before terminator:",
    [
      "_1",
      "_5",
      "_8",
      "_9"
    ],
    "terminator: assert(!move _9, /"attempt to negate `{}`, which would overflow/", _8) -> [success: bb4, unwind: bb6]",
    {
      "bb4": [
        "state:",
        [
          "_1",
          "_5",
          "_8"
        ]
      ],
      "bb6": [
        "state:",
        []
      ]
    }
  ],
  "bb3": [
    [
      [
        "state:",
        [
          "_1",
          "_5"
        ],
        "statement: StorageLive(_7)"
      ],
      [
        "state:",
        [
          "_1",
          "_5"
        ],
        "statement: _7 = _1"
      ],
      [
        "state:",
        [
          "_1",
          "_5",
          "_7"
        ],
        "statement: _3 = move _7"
      ],
      [
        "state:",
        [
          "_1",
          "_3",
          "_5"
        ],
        "statement: StorageDead(_7)"
      ],
      [
        "state:",
        [
          "_1",
          "_3",
          "_5"
        ],
        "statement: _4 = const ()"
      ]
    ],
    "state before terminator:",
    [
      "_1",
      "_3",
      "_4",
      "_5"
    ],
    "terminator: goto -> bb5",
    {
      "bb5": [
        "state:",
        [
          "_1",
          "_3",
          "_4",
          "_5"
        ]
      ]
    }
  ],
  "bb4": [
    [
      [
        "state:",
        [
          "_1",
          "_5",
          "_8"
        ],
        "statement: _3 = Neg(move _8)"
      ],
      [
        "state:",
        [
          "_1",
          "_3",
          "_5"
        ],
        "statement: StorageDead(_8)"
      ],
      [
        "state:",
        [
          "_1",
          "_3",
          "_5"
        ],
        "statement: _4 = const ()"
      ]
    ],
    "state before terminator:",
    [
      "_1",
      "_3",
      "_4",
      "_5"
    ],
    "terminator: goto -> bb5",
    {
      "bb5": [
        "state:",
        [
          "_1",
          "_3",
          "_4",
          "_5"
        ]
      ]
    }
  ],
  "bb5": [
    [
      [
        "state:",
        [
          "_1",
          "_3",
          "_4",
          "_5"
        ],
        "statement: StorageDead(_5)"
      ],
      [
        "state:",
        [
          "_1",
          "_3",
          "_4",
          "_5"
        ],
        "statement: StorageDead(_4)"
      ],
      [
        "state:",
        [
          "_1",
          "_3",
          "_4",
          "_5"
        ],
        "statement: _0 = _3"
      ],
      [
        "state:",
        [
          "_0",
          "_1",
          "_3",
          "_4",
          "_5"
        ],
        "statement: StorageDead(_3)"
      ]
    ],
    "state before terminator:",
    [
      "_0",
      "_1",
      "_3",
      "_4",
      "_5"
    ],
    "terminator: return",
    {}
  ],
  "bb6": [
    [],
    "state before terminator:",
    [],
    "terminator: resume",
    {}
  ]
}